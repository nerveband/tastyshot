// Serverless function to handle Google Gemini AI API calls securely
import { GoogleGenerativeAI } from '@google/generative-ai';

export default async function handler(req, res) {
  console.log('=== GEMINI API HANDLER START ===');
  console.log('Method:', req.method);
  
  // Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET,OPTIONS,PATCH,DELETE,POST,PUT');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version');

  // Handle preflight requests
  if (req.method === 'OPTIONS') {
    console.log('Handling OPTIONS preflight request');
    res.status(200).end();
    return;
  }

  // Only allow POST requests
  if (req.method !== 'POST') {
    console.log('Invalid method:', req.method);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    console.log('Request body:', JSON.stringify(req.body, null, 2));
    
    const { action, model, input } = req.body;
    
    console.log('Parsed request:', { action, model, inputKeys: Object.keys(input || {}) });
    
    // Check environment variables
    console.log('Environment check:');
    console.log('- GEMINI_API_KEY exists:', !!process.env.GEMINI_API_KEY);
    console.log('- GOOGLE_API_KEY exists:', !!process.env.GOOGLE_API_KEY);
    console.log('- NODE_ENV:', process.env.NODE_ENV);
    console.log('- VERCEL_ENV:', process.env.VERCEL_ENV);
    
    // Get API key from environment
    const GEMINI_API_KEY = process.env.GEMINI_API_KEY || process.env.GOOGLE_API_KEY;
    
    if (!GEMINI_API_KEY) {
      console.error('No API key found in environment variables');
      return res.status(500).json({ 
        error: 'Gemini API key not configured',
        details: 'GEMINI_API_KEY or GOOGLE_API_KEY environment variable is missing'
      });
    }
    
    console.log('API key found, length:', GEMINI_API_KEY.length);
    console.log('Token starts with:', GEMINI_API_KEY.substring(0, 8) + '...');

    // Initialize Gemini client
    console.log('Initializing Gemini client...');
    const ai = new GoogleGenerativeAI(GEMINI_API_KEY);
    console.log('Gemini client initialized successfully');

    let result;

    switch (action) {
      case 'generateContent':
        try {
          console.log('=== STARTING GENERATE CONTENT ===');
          console.log('Model:', model);
          console.log('Input details:', {
            keys: Object.keys(input || {}),
            imageLength: input?.image?.length || 'N/A',
            prompt: input?.prompt || 'N/A'
          });
          
          // Validate required inputs
          if (!input || !input.image) {
            throw new Error('Missing required input: image');
          }
          
          if (!input.prompt) {
            throw new Error('Missing required input: prompt');
          }
          
          console.log('Starting generateContent call...');
          const startTime = Date.now();
          
          // Create image part from base64
          const imagePart = {
            inlineData: {
              data: input.image.split(',')[1] || input.image, // Handle data URL or raw base64
              mimeType: 'image/jpeg'
            }
          };
          
          // Get the model and generate content
          const modelName = model || 'gemini-2.5-flash-image-preview';
          const aiModel = ai.getGenerativeModel({ model: modelName });
          
          // Generate content using Gemini
          const response = await aiModel.generateContent([imagePart, input.prompt]);
          
          const endTime = Date.now();
          console.log('generateContent completed in', endTime - startTime, 'ms');
          
          // Extract generated image from response - Gemini 2.5 Flash Image Preview CAN generate images!
          let outputImage = null;
          let analysisText = null;
          
          if (response.candidates && response.candidates[0]) {
            const candidate = response.candidates[0];
            if (candidate.content && candidate.content.parts) {
              for (const part of candidate.content.parts) {
                if (part.inlineData) {
                  outputImage = `data:${part.inlineData.mimeType || 'image/png'};base64,${part.inlineData.data}`;
                  console.log('Generated image found in response, size:', outputImage.length);
                } else if (part.text) {
                  analysisText = part.text;
                  console.log('Text analysis found in response:', part.text.substring(0, 100) + '...');
                }
              }
            }
          }
          
          // If no image in response, Gemini might have provided text analysis instead
          if (!outputImage) {
            console.log('No image generated by Gemini - this might be expected for some prompts');
            console.log('Response analysis text:', analysisText || response.text);
            
            // For image editing prompts, Gemini should generate an image
            // If it doesn't, it might be a prompt issue or model limitation
            throw new Error('Gemini did not generate an edited image. This could be due to content policy restrictions or the specific prompt used. Try rephrasing your editing request.');
          }
          
          // Return in consistent format with generated image and analysis
          const responseData = {
            id: `${model.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}`,
            status: 'succeeded',
            output: [outputImage], // Always return the generated image
            text: analysisText || response.text || null,
            error: null
          };
          
          console.log('Sending response');
          return res.status(200).json(responseData);
          
        } catch (genError) {
          console.error('=== GENERATE CONTENT ERROR ===');
          console.error('Error name:', genError?.name);
          console.error('Error message:', genError?.message);
          console.error('Error stack:', genError?.stack);
          throw genError;
        }
      
        
      default:
        console.error('Invalid action:', action);
        return res.status(400).json({ error: 'Invalid action. Use "generateContent"' });
    }

  } catch (error) {
    console.error('=== MAIN ERROR HANDLER ===');
    console.error('Error name:', error?.name);
    console.error('Error message:', error?.message);
    console.error('Error stack:', error?.stack);
    
    const errorResponse = {
      error: 'Gemini API error',
      details: error.message || 'Unknown error occurred',
      message: error.toString(),
      type: error?.constructor?.name || 'Unknown'
    };
    
    console.log('Sending error response:', JSON.stringify(errorResponse, null, 2));
    console.log('=== GEMINI API HANDLER END (ERROR) ===');
    
    return res.status(500).json(errorResponse);
  }
}